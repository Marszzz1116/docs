import{_ as a,c as e,o as t,U as s,c2 as o}from"./chunks/framework.-9Q_U4ls.js";const g=JSON.parse('{"title":"测试单驱动自动化测试","description":"","frontmatter":{},"headers":[],"relativePath":"规范文档/流程规范/测试单驱动自动化.md","filePath":"规范文档/流程规范/测试单驱动自动化.md","lastUpdated":1705116614000}'),i={name:"规范文档/流程规范/测试单驱动自动化.md"},d=s(`<h1 id="测试单驱动自动化测试" tabindex="-1">测试单驱动自动化测试 <a class="header-anchor" href="#测试单驱动自动化测试" aria-label="Permalink to &quot;测试单驱动自动化测试&quot;">​</a></h1><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ==================================</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Author : mikigo</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ==================================</span></span></code></pre></div><h2 id="一、测试流程" tabindex="-1">一、测试流程 <a class="header-anchor" href="#一、测试流程" aria-label="Permalink to &quot;一、测试流程&quot;">​</a></h2><p><img src="`+o+`" alt=""></p><h2 id="二、测试单关键信息规范" tabindex="-1">二、测试单关键信息规范 <a class="header-anchor" href="#二、测试单关键信息规范" aria-label="Permalink to &quot;二、测试单关键信息规范&quot;">​</a></h2><h3 id="_1、测试单名称" tabindex="-1">1、测试单名称 <a class="header-anchor" href="#_1、测试单名称" aria-label="Permalink to &quot;1、测试单名称&quot;">​</a></h3><p>[日期]-[系统大版本]-[应用名称]-[应用版本]-[迭代阶段]-[第x轮]-【系统版本】xxx</p><p>举例：</p><p><a href="https://pms.uniontech.com/testtask-view-35573.html" target="_blank" rel="noreferrer">2023-12-12-专业版V20-软件包安装器-6.0.18.2-SP11-第1轮-【1062】BUG回归</a></p><h3 id="_2、测试单版本详情" tabindex="-1">2、测试单版本详情 <a class="header-anchor" href="#_2、测试单版本详情" aria-label="Permalink to &quot;2、测试单版本详情&quot;">​</a></h3><p>在 <strong><code>版本详情</code>-<code>描述</code></strong> 中包含关键信息：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">【镜像环境】：【1062】</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">【deb地址】：【http://10.0.32.52:5001/tasks/373109/】</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">【仓库源】：【deb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [trusted=yes] https://aptly.uniontech.com/pkg/eagle-1063/release-candidate/44CQ5paH566h44CRMTA2M-mcgOaxgua1i-ivlS0yMDIzLTEyLTEyMjAyMy0xMi0xMiAxNDowNjowNw/ unstable main】</span></span></code></pre></div><h4 id="多个deb地址或仓库源的情况" tabindex="-1">多个deb地址或仓库源的情况 <a class="header-anchor" href="#多个deb地址或仓库源的情况" aria-label="Permalink to &quot;多个deb地址或仓库源的情况&quot;">​</a></h4><p>在同一个中括号里面写多个 deb 地址或仓库源地址，用 <strong><code>英文逗号</code></strong> 分隔；</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">【deb地址】：【deepin-deb-installer：http://10.0.32.52:5001/tasks/373109/,libqapt：http://10.0.32.52:5001/tasks/373108/】</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">【仓库源】：【deb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [trusted=yes] https://aptly.uniontech.com/pkg/eagle-1063/release-candidate/44CQ5paH566h44CRMTA2M-mcgOaxgua1i-ivlS0yMDIzLTEyLTEyMjAyMy0xMi0xMiAxNDowNjowNw/ unstable main,deb [trusted</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yes] https://aptly.uniontech.com/pkg/eagle-1063/release-candidate/44CQ5paH566h44CRMTA2M-mcgOaxgua1i-ivlS0yMDIzLTEyLTEyMjAyMy0xMi0xMiAxNDowNjowNw/ unstable main】</span></span></code></pre></div><h2 id="三、测试包获取-部署" tabindex="-1">三、测试包获取&amp;部署 <a class="header-anchor" href="#三、测试包获取-部署" aria-label="Permalink to &quot;三、测试包获取&amp;部署&quot;">​</a></h2><h3 id="_1、deb地址" tabindex="-1">1、deb地址 <a class="header-anchor" href="#_1、deb地址" aria-label="Permalink to &quot;1、deb地址&quot;">​</a></h3><p>根据 deb 地址下载里面的所有 <code>deb</code> 包（排除了 <code>dbgsym</code> 和 <code>dev</code> 包）</p><h3 id="_2、仓库源" tabindex="-1">2、仓库源 <a class="header-anchor" href="#_2、仓库源" aria-label="Permalink to &quot;2、仓库源&quot;">​</a></h3><p>根据仓库源中的 <code>https</code> 地址，下载里面的 <code>deb</code> 包；（排除了 <code>dbgsym</code> 和 <code>dev</code> 包）</p><p>有同学在这里肯定要问了，</p><p>咦，等会儿，感觉小脑萎缩了，有仓库源为什么不用仓库源直接通过命令升级包，而要下载里面的包？</p><p>因为文管测试同学反馈，如果采用仓库源升级，有些包系统中没有但是仓库源中有，升级也不能把这些包安装上的，而且这些包是不确定的，因此咱们用下载的方式；</p><p>下载之后会在对应的测试机上去安装部署，部署完之后重启；</p><h2 id="三、测试单自动关联用例" tabindex="-1">三、测试单自动关联用例 <a class="header-anchor" href="#三、测试单自动关联用例" aria-label="Permalink to &quot;三、测试单自动关联用例&quot;">​</a></h2><p>将所有 <code>是否已自动化</code> 为 <code>是</code> 且 <code>上线CD</code> 为 <code>是</code> 的用例自动关联到测试单中，用于执行自动化测试；</p><p>其中，如果在自动化工程中标记了 <code>skip-</code> 标签的用例不会被关联进来；</p><h2 id="四、自动化测试并回填" tabindex="-1">四、自动化测试并回填 <a class="header-anchor" href="#四、自动化测试并回填" aria-label="Permalink to &quot;四、自动化测试并回填&quot;">​</a></h2><p>目前有 4 个机型（ <code>FT2000</code>、<code>loongarch(3A5000)</code>、<code>L420</code>、<code>海光x86</code> ），分 2 条业务线（开发线和维护线）执行自动化测试；</p><p>基于 <a href="https://github.com/linuxdeepin/deepin-autotest-framework" target="_blank" rel="noreferrer"><strong>YouQu</strong></a> 框架远程执行方案，控制远程测试机并行执行AT用例；</p><p>执行完之后 <a href="https://github.com/linuxdeepin/deepin-autotest-framework" target="_blank" rel="noreferrer"><strong>YouQu</strong></a> 会回收所有机器的测试结果，并整合结果，如果某条AT用例在所有测试机上执行结果都是 <code>通过</code>，那这条用例的测试结果为 <code>通过</code>，否则为 <code>失败</code>；</p><p>最后将整合后的结果，回填到 <code>PMS</code> 测试单关联的用例中；</p><h2 id="五、手工复验失败用例" tabindex="-1">五、手工复验失败用例 <a class="header-anchor" href="#五、手工复验失败用例" aria-label="Permalink to &quot;五、手工复验失败用例&quot;">​</a></h2><p>对于测试单中某些用例执行状态是 <code>失败</code> 的，手工复测一下这些用例即可，如果手工复测没有问题，可直接将用例执行结果勾选为 <code>通过</code>；</p><blockquote><p>这类情况一般是AT用例存在一些问题，在后续的AT开发过程中会进行修复，手工测试同学可以不用特别关注。</p></blockquote><h2 id="六、at报告和at过程日志" tabindex="-1">六、AT报告和AT过程日志 <a class="header-anchor" href="#六、at报告和at过程日志" aria-label="Permalink to &quot;六、AT报告和AT过程日志&quot;">​</a></h2><h3 id="at报告" tabindex="-1">AT报告 <a class="header-anchor" href="#at报告" aria-label="Permalink to &quot;AT报告&quot;">​</a></h3><p>在 <strong><a href="https://cooperation.uniontech.com/app/3642d1a4-7463-4bb6-96bc-69c5c1092a02/64083c8c571dca6a6b0c69e6/64097be258096ffd1a12dda2/64c35664cc11a7bd3d7e4b68" target="_blank" rel="noreferrer">明道云-测试部-工具应用测试部-任务排期表-测试单任务视图</a></strong> 中，找到 <strong>自动化报告</strong> 列，点击里面的 <code>url</code> 即可访问测试单对应的自动化测试报告在线地址；</p><h3 id="at过程日志" tabindex="-1">AT过程日志 <a class="header-anchor" href="#at过程日志" aria-label="Permalink to &quot;AT过程日志&quot;">​</a></h3><p>在 <strong><a href="https://cooperation.uniontech.com/app/3642d1a4-7463-4bb6-96bc-69c5c1092a02/64083c8c571dca6a6b0c69e6/64097be258096ffd1a12dda2/64c35664cc11a7bd3d7e4b68" target="_blank" rel="noreferrer">明道云-测试部-工具应用测试部-任务排期表-测试单任务视图</a></strong> 中，找到 <strong>Jenkins URL</strong> 列，点击里面的 <code>url</code> 即可访问测试单对应的 <code>Jenkins</code> 任务地址，可以查看整个测试过程的日志输出；</p>`,40),n=[d];function c(l,r,h,p,b,k){return t(),e("div",null,n)}const m=a(i,[["render",c]]);export{g as __pageData,m as default};
